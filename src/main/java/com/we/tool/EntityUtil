/** *  */package com.we.tool;
import java.io.BufferedWriter;import java.io.File;import java.io.IOException;import java.io.BufferedWriter;import java.io.OutputStreamWriter;import java.io.FileOutputStream;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;
import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;
/** * 自动生成MyBatis的实体类、实体映射XML文件、Mapper * @author liliu * */@SuppressWarnings({ "hiding", "unused" })public class EntityUtil {
   /**     **********************************使用前必读*******************     **     ** 使用前请将moduleName更改为自己模块的名称即可（一般情况下与数据库名一致），其他无须改动。     **     ***********************************************************     */  private static String tableName = null;  // 对应表名（根据自己表做相应调整，为空获取数据库所有表!!!务必修改^_^）// tableName = "project_brief";  private final String moduleName = "brief"; // 对应模块名称（根据自己模块做相应调整!!!务必修改^_^）     private final String bean_path = "d:/project/bean";     private final String mapper_path = "d:/project/mapperdao";     private final String xml_path = "d:/project/mapperdao/xml";        private final String service_path = "d:/project/service";        private final String impl_path = "d:/project/service/impl";     private final String controller_path = "d:/project/controller";     private final String bean_package = "com.we." + moduleName + ".bean";     private final String mapper_package = "com.we.dao";// + moduleName + ".mapper";        private final String service_package = "com.we." + moduleName + ".service";        private final String impl_package = "com.we." + moduleName + ".service.impl";        private final String controller_package = "com.we." + moduleName + ".controller";            //数据库连接    private final String driverName = "com.mysql.jdbc.Driver";     private final String user = "weadmin";     private final String password = "longjincha";     private final String url = "jdbc:mysql://172.17.128.53/we_project?useSSL=true";//?characterEncoding=utf8            /* ***************************end 变量根据需有变动***********************************/     //数据类型    private final String type_char = "char";     private final String type_date = "date";     private final String type_timestamp = "timestamp";     private final String type_int = "int";     private final String type_bigint = "bigint";     private final String type_text = "text";     private final String type_bit = "bit";     private final String type_decimal = "decimal";     private final String type_blob = "blob";     //文件名称    private String beanName = null;     private String mapperName = null;        private String serviceName = null;        private String implName = null;        private String controllerName = null;        private Connection conn = null;      private void init() throws ClassNotFoundException, SQLException {        Class.forName(driverName);        conn = DriverManager.getConnection(url, user, password);    }      /**     *  获取所有的表     *     * @return     * @throws SQLException      */    private List<String> getTables() throws SQLException {        List<String> tables = new ArrayList<String>();        PreparedStatement pstate = conn.prepareStatement("show tables");        ResultSet results = pstate.executeQuery();        while ( results.next() ) {            String tableName = results.getString(1);            //          if ( tableName.toLowerCase().startsWith("yy_") ) {            tables.add(tableName);            //          }        }        return tables;    }      private void processTable( String table ) {        StringBuffer sb = new StringBuffer(table.length());        String tableNew = table.toLowerCase();        String[] tables = tableNew.split("_");        String temp = null;        for ( int i = 1 ; i < tables.length ; i++ ) {            temp = tables[i].trim();            sb.append(temp.substring(0, 1).toUpperCase()).append(temp.substring(1));        }        beanName = sb.toString();        mapperName = beanName + "Mapper";        serviceName= "I" + beanName + "Service";        implName= beanName + "ServiceImpl";        controllerName= beanName + "Controller";    }      private String processType( String type ) {        if ( type.indexOf(type_char) > -1 ) {            return "String";        } else if ( type.indexOf(type_bigint) > -1 ) {            return "Long";        } else if ( type.indexOf(type_int) > -1 ) {            return "Integer";        } else if ( type.indexOf(type_date) > -1 ) {            return "java.util.Date";        } else if ( type.indexOf(type_text) > -1 ) {            return "String";        } else if ( type.indexOf(type_timestamp) > -1 ) {            return "java.util.Date";        } else if ( type.indexOf(type_bit) > -1 ) {            return "Boolean";        } else if ( type.indexOf(type_decimal) > -1 ) {            return "java.math.BigDecimal";        } else if ( type.indexOf(type_blob) > -1 ) {            return "byte[]";        }        return null;    }      private String processField( String field ) {        StringBuffer sb = new StringBuffer(field.length());        //field = field.toLowerCase();        String[] fields = field.split("_");        String temp = null;        sb.append(fields[0]);        for ( int i = 1 ; i < fields.length ; i++ ) {            temp = fields[i].trim();            sb.append(temp.substring(0, 1).toUpperCase()).append(temp.substring(1));        }        return sb.toString();    }      /**     *  将实体类名首字母改为小写     *     * @param beanName     * @return      */    private String processResultMapId( String beanName ) {        return beanName.substring(0, 1).toLowerCase() + beanName.substring(1);    }     public static boolean createFile(String destFileName) {          File file = new File(destFileName);          if(file.exists()) {              System.out.println("创建单个文件" + destFileName + "失败，目标文件已存在！");              return false;          }          if (destFileName.endsWith(File.separator)) {              System.out.println("创建单个文件" + destFileName + "失败，目标文件不能为目录！");              return false;          }          //判断目标文件所在的目录是否存在          if(!file.getParentFile().exists()) {              //如果目标文件所在的目录不存在，则创建父目录              System.out.println("目标文件所在目录不存在，准备创建它！");              if(!file.getParentFile().mkdirs()) {                  System.out.println("创建目标文件所在目录失败！");                  return false;              }          }          //创建目标文件          try {              if (file.createNewFile()) {                  System.out.println("创建单个文件" + destFileName + "成功！");                  return true;              } else {                  System.out.println("创建单个文件" + destFileName + "失败！");                  return false;              }          } catch (IOException e) {              e.printStackTrace();              System.out.println("创建单个文件" + destFileName + "失败！" + e.getMessage());              return false;          }      }                public static boolean createDir(String destDirName) {          File dir = new File(destDirName);          if (dir.exists()) {              System.out.println("创建目录" + destDirName + "失败，目标目录已经存在");              return false;          }          if (!destDirName.endsWith(File.separator)) {              destDirName = destDirName + File.separator;          }          //创建目录          if (dir.mkdirs()) {              System.out.println("创建目录" + destDirName + "成功！");              return true;          } else {              System.out.println("创建目录" + destDirName + "失败！");              return false;          }      }                public static String createTempFile(String prefix, String suffix, String dirName) {          File tempFile = null;          if (dirName == null) {              try{                  //在默认文件夹下创建临时文件                  tempFile = File.createTempFile(prefix, suffix);                  //返回临时文件的路径                  return tempFile.getCanonicalPath();              } catch (IOException e) {                  e.printStackTrace();                  System.out.println("创建临时文件失败！" + e.getMessage());                  return null;              }          } else {              File dir = new File(dirName);              //如果临时文件所在目录不存在，首先创建              if (!dir.exists()) {                  if (!createDir(dirName)) {                      System.out.println("创建临时文件失败，不能创建临时文件所在的目录！");                      return null;                  }              }              try {                  //在指定目录下创建临时文件                  tempFile = File.createTempFile(prefix, suffix, dir);                  return tempFile.getCanonicalPath();              } catch (IOException e) {                  e.printStackTrace();                  System.out.println("创建临时文件失败！" + e.getMessage());                  return null;              }          }     }     /**     *  构建类上面的注释     *     * @param bw     * @param text     * @return     * @throws IOException      */    private BufferedWriter buildClassComment( BufferedWriter bw, String text ) throws IOException {        bw.newLine();        bw.newLine();        bw.write("/**");        bw.newLine();        bw.write(" * ");        bw.newLine();        bw.write(" * " + text);        bw.newLine();        bw.write(" * ");        bw.newLine();        bw.write(" **/");        return bw;    }      /**     *  构建方法上面的注释     *     * @param bw     * @param text     * @return     * @throws IOException      */    private BufferedWriter buildMethodComment( BufferedWriter bw, String text ) throws IOException {        bw.newLine();        bw.write("\t/**");        bw.newLine();        bw.write("\t * ");        bw.newLine();        bw.write("\t * " + text);        bw.newLine();        bw.write("\t * ");        bw.newLine();        bw.write("\t **/");        return bw;    }      /**     *  生成实体类     *     * @param columns     * @param types     * @param comments     * @throws IOException      */    private void buildEntityBean( List<String> columns, List<String> types, List<String> comments, String tableComment )        throws IOException {        File folder = new File(bean_path);        if ( !folder.exists() ) {            folder.mkdir();            createDir(bean_path);          }                File beanFile = new File(bean_path, beanName + ".java");        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(beanFile)));        bw.write("package " + bean_package + ";");        bw.newLine();        bw.write("import java.io.Serializable;");        bw.newLine();        //bw.write("import lombok.Data;");        //bw.write("import javax.persistence.Entity;");        bw = buildClassComment(bw, tableComment);        bw.newLine();        bw.write("@SuppressWarnings(\"serial\")"); bw.newLine();        bw.newLine();        //bw.write("@Entity"); bw.newLine();        //bw.write("@Data"); bw.newLine();        //bw.newLine();        bw.write("public class " + beanName + " implements Serializable {");        bw.newLine();        bw.newLine();        int size = columns.size();        for ( int i = 0 ; i < size ; i++ ) {            bw.write("\t/**" + comments.get(i) + "**/");            bw.newLine();            bw.write("\tprivate " + processType(types.get(i)) + " " + processField(columns.get(i)) + ";");            bw.newLine();            bw.newLine();        }        bw.newLine();        // 生成get 和 set方法        String tempField = null;        String _tempField = null;        String tempType = null;        for ( int i = 0 ; i < size ; i++ ) {            tempType = processType(types.get(i));            _tempField = processField(columns.get(i));            tempField = _tempField.substring(0, 1).toUpperCase() + _tempField.substring(1);            bw.newLine();            //          bw.write("\tpublic void set" + tempField + "(" + tempType + " _" + _tempField + "){");            bw.write("\tpublic void set" + tempField + "(" + tempType + " " + _tempField + "){");            bw.newLine();            //          bw.write("\t\tthis." + _tempField + "=_" + _tempField + ";");            bw.write("\t\tthis." + _tempField + " = " + _tempField + ";");            bw.newLine();            bw.write("\t}");            bw.newLine();            bw.newLine();            bw.write("\tpublic " + tempType + " get" + tempField + "(){");            bw.newLine();            bw.write("\t\treturn this." + _tempField + ";");            bw.newLine();            bw.write("\t}");            bw.newLine();        }        bw.newLine();        bw.write("}");        bw.newLine();        bw.flush();        bw.close();    }      /**     *  构建Mapper文件     *     * @throws IOException      */    private void buildMapper() throws IOException {        File folder = new File(mapper_path);        if ( !folder.exists() ) {            folder.mkdirs();        }         File mapperFile = new File(mapper_path, mapperName + ".java");        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(mapperFile), "utf-8"));        bw.write("package " + mapper_package + ";");        bw.newLine();        bw.newLine();        bw.write("import " + bean_package + "." + beanName + ";");        bw.newLine();        bw.write("import org.apache.ibatis.annotations.Param;");        bw = buildClassComment(bw, mapperName + "数据库操作接口类");        bw.newLine();        bw.newLine();        //      bw.write("public interface " + mapperName + " extends " + mapper_extends + "<" + beanName + "> {");        bw.write("public interface " + mapperName + "{");        bw.newLine();        bw.newLine();        // ----------定义Mapper中的方法Begin----------        bw = buildMethodComment(bw, "查询（根据主键ID查询）");        bw.newLine();        bw.write("\t" + beanName + "  selectByPrimaryKey ( @Param(\"id\") Long id );");        bw.newLine();        bw = buildMethodComment(bw, "删除（根据主键ID删除）");        bw.newLine();        bw.write("\t" + "int deleteByPrimaryKey ( @Param(\"id\") Long id );");        bw.newLine();        bw = buildMethodComment(bw, "添加");        bw.newLine();        bw.write("\t" + "int insert( " + beanName + " record );");        bw.newLine();        bw = buildMethodComment(bw, "添加 （匹配有值的字段）");        bw.newLine();        bw.write("\t" + "int insertSelective( " + beanName + " record );");        bw.newLine();        bw = buildMethodComment(bw, "修改 （匹配有值的字段）");        bw.newLine();        bw.write("\t" + "int updateByPrimaryKeySelective( " + beanName + " record );");        bw.newLine();        bw = buildMethodComment(bw, "修改（根据主键ID修改）");        bw.newLine();        bw.write("\t" + "int updateByPrimaryKey ( " + beanName + " record );");        bw.newLine();         // ----------定义Mapper中的方法End----------        bw.newLine();        bw.write("}");        bw.flush();        bw.close();    }      /**     *  构建实体类映射XML文件     *     * @param columns     * @param types     * @param comments     * @throws IOException      */    private void buildMapperXml( List<String> columns, List<String> types, List<String> comments ) throws IOException {        File folder = new File(xml_path);        if ( !folder.exists() ) {            folder.mkdirs();        }         File mapperXmlFile = new File(xml_path, mapperName + ".xml");        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(mapperXmlFile)));        bw.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");        bw.newLine();        bw.write("<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" ");        bw.newLine();        bw.write("    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">");        bw.newLine();        bw.write("<mapper namespace=\"" + mapper_package + "." + mapperName + "\">");        bw.newLine();        bw.newLine();         /*bw.write("\t<!--实体映射-->");        bw.newLine();        bw.write("\t<resultMap id=\"" + this.processResultMapId(beanName) + "ResultMap\" type=\"" + beanName + "\">");        bw.newLine();        bw.write("\t\t<!--" + comments.get(0) + "-->");        bw.newLine();        bw.write("\t\t<id property=\"" + this.processField(columns.get(0)) + "\" column=\"" + columns.get(0) + "\" />");        bw.newLine();        int size = columns.size();        for ( int i = 1 ; i < size ; i++ ) {            bw.write("\t\t<!--" + comments.get(i) + "-->");            bw.newLine();            bw.write("\t\t<result property=\""                    + this.processField(columns.get(i)) + "\" column=\"" + columns.get(i) + "\" />");            bw.newLine();        }        bw.write("\t</resultMap>");         bw.newLine();        bw.newLine();        bw.newLine();*/         // 下面开始写SqlMapper中的方法        // this.outputSqlMapperMethod(bw, columns, types);        buildSQL(bw, columns, types);         bw.write("</mapper>");        bw.flush();        bw.close();    }      private void buildSQL( BufferedWriter bw, List<String> columns, List<String> types ) throws IOException {        int size = columns.size();        // 通用结果列        bw.write("\t<!-- 通用查询结果列-->");        bw.newLine();        bw.write("\t<sql id=\"Base_Column_List\">");        bw.newLine();         bw.write("\t\t id,");        for ( int i = 1 ; i < size ; i++ ) {            bw.write("\t" + columns.get(i));            if ( i != size - 1 ) {                bw.write(",");            }        }         bw.newLine();        bw.write("\t</sql>");        bw.newLine();        bw.newLine();          // 查询（根据主键ID查询）        bw.write("\t<!-- 查询（根据主键ID查询） -->");        bw.newLine();        bw.write("\t<select id=\"selectByPrimaryKey\" resultType=\""                + processResultMapId(beanName) + "\" parameterType=\"java.lang." + processType(types.get(0)) + "\">");        bw.newLine();        bw.write("\t\t SELECT");        bw.newLine();        bw.write("\t\t <include refid=\"Base_Column_List\" />");        bw.newLine();        bw.write("\t\t FROM " + tableName);        bw.newLine();        bw.write("\t\t WHERE " + columns.get(0) + " = #{" + processField(columns.get(0)) + "}");        bw.newLine();        bw.write("\t</select>");        bw.newLine();        bw.newLine();        // 查询完          // 删除（根据主键ID删除）        bw.write("\t<!--删除：根据主键ID删除-->");        bw.newLine();        bw.write("\t<delete id=\"deleteByPrimaryKey\" parameterType=\"java.lang." + processType(types.get(0)) + "\">");        bw.newLine();        bw.write("\t\t DELETE FROM " + tableName);        bw.newLine();        bw.write("\t\t WHERE " + columns.get(0) + " = #{" + processField(columns.get(0)) + "}");        bw.newLine();        bw.write("\t</delete>");        bw.newLine();        bw.newLine();        // 删除完          // 添加insert方法        bw.write("\t<!-- 添加 -->");        bw.newLine();        bw.write("\t<insert id=\"insert\" parameterType=\"" + processResultMapId(beanName) + "\">");        bw.newLine();        bw.write("\t\t INSERT INTO " + tableName);        bw.newLine();        bw.write(" \t\t(");        for ( int i = 0 ; i < size ; i++ ) {            bw.write(columns.get(i));            if ( i != size - 1 ) {                bw.write(",");            }        }        bw.write(") ");        bw.newLine();        bw.write("\t\t VALUES ");        bw.newLine();        bw.write(" \t\t(");        for ( int i = 0 ; i < size ; i++ ) {            bw.write("#{" + processField(columns.get(i)) + "}");            if ( i != size - 1 ) {                bw.write(",");            }        }        bw.write(") ");        bw.newLine();        bw.write("\t</insert>");        bw.newLine();        bw.newLine();        // 添加insert完          //---------------  insert方法（匹配有值的字段）        bw.write("\t<!-- 添加 （匹配有值的字段）-->");        bw.newLine();        bw.write("\t<insert id=\"insertSelective\" parameterType=\"" + processResultMapId(beanName) + "\">");        bw.newLine();        bw.write("\t\t INSERT INTO " + tableName);        bw.newLine();        bw.write("\t\t <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\" >");        bw.newLine();         String tempField = null;        for ( int i = 0 ; i < size ; i++ ) {            tempField = processField(columns.get(i));            bw.write("\t\t\t<if test=\"" + tempField + " != null\">");            bw.newLine();            bw.write("\t\t\t\t " + columns.get(i) + ",");            bw.newLine();            bw.write("\t\t\t</if>");            bw.newLine();        }         bw.newLine();        bw.write("\t\t </trim>");        bw.newLine();         bw.write("\t\t <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\" >");        bw.newLine();         tempField = null;        for ( int i = 0 ; i < size ; i++ ) {            tempField = processField(columns.get(i));            bw.write("\t\t\t<if test=\"" + tempField + "!=null\">");            bw.newLine();            bw.write("\t\t\t\t #{" + tempField + "},");            bw.newLine();            bw.write("\t\t\t</if>");            bw.newLine();        }         bw.write("\t\t </trim>");        bw.newLine();        bw.write("\t</insert>");        bw.newLine();        bw.newLine();        //---------------  完毕          // 修改update方法        bw.write("\t<!-- 修 改-->");        bw.newLine();        bw.write("\t<update id=\"updateByPrimaryKeySelective\" parameterType=\"" + processResultMapId(beanName) + "\">");        bw.newLine();        bw.write("\t\t UPDATE " + tableName);        bw.newLine();        bw.write(" \t\t <set> ");        bw.newLine();         tempField = null;        for ( int i = 1 ; i < size ; i++ ) {            tempField = processField(columns.get(i));            bw.write("\t\t\t<if test=\"" + tempField + " != null\">");            bw.newLine();            bw.write("\t\t\t\t " + columns.get(i) + " = #{" + tempField + "},");            bw.newLine();            bw.write("\t\t\t</if>");            bw.newLine();        }         bw.newLine();        bw.write(" \t\t </set>");        bw.newLine();        bw.write("\t\t WHERE " + columns.get(0) + " = #{" + processField(columns.get(0)) + "}");        bw.newLine();        bw.write("\t</update>");        bw.newLine();        bw.newLine();        // update方法完毕         // ----- 修改（匹配有值的字段）        bw.write("\t<!-- 修 改-->");        bw.newLine();        bw.write("\t<update id=\"updateByPrimaryKey\" parameterType=\"" + processResultMapId(beanName) + "\">");        bw.newLine();        bw.write("\t\t UPDATE " + tableName);        bw.newLine();        bw.write("\t\t SET ");         bw.newLine();        tempField = null;        for ( int i = 1 ; i < size ; i++ ) {            tempField = processField(columns.get(i));            bw.write("\t\t\t " + columns.get(i) + " = #{" + tempField + "}");            if ( i != size - 1 ) {                bw.write(",");            }            bw.newLine();        }         bw.write("\t\t WHERE " + columns.get(0) + " = #{" + processField(columns.get(0)) + "}");        bw.newLine();        bw.write("\t</update>");        bw.newLine();        bw.newLine();    }      /**     *  获取所有的数据库表注释     *     * @return     * @throws SQLException      */    private Map<String, String> getTableComment() throws SQLException {        Map<String, String> maps = new HashMap<String, String>();        PreparedStatement pstate = conn.prepareStatement("show table status");        ResultSet results = pstate.executeQuery();        while ( results.next() ) {            String tableName = results.getString("NAME");            String comment = results.getString("COMMENT");            maps.put(tableName, comment);        }        return maps;    }            /**     *  构建Service文件     *     * @throws IOException      */    private void buildService() throws IOException {        File folder = new File(service_path);        if ( !folder.exists() ) {            folder.mkdirs();        }         File serviceFile = new File(service_path, serviceName + ".java");        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(serviceFile), "utf-8"));        bw.write("package " + service_package + ";");        bw.newLine();        bw.newLine();  bw.write("import java.sql.SQLException;"); bw.newLine();  bw.write("import java.util.List;"); bw.newLine();  bw.write("import " + bean_package + "." + beanName + ";"); bw.newLine();  bw.write("import com.we.bean.ProjectParameter;"); bw.newLine();  bw.newLine();  bw.write("/**"); bw.newLine();  bw.write(" * @author liuli"); bw.newLine();  bw.write(" *"); bw.newLine();  bw.write("*/"); bw.newLine();        bw = buildClassComment(bw, serviceName + " Service接口类"); bw.newLine();        bw.newLine();        bw.newLine();        bw.write("public interface " + serviceName + "{"); bw.newLine();        bw.newLine();        bw.newLine();        // ----------定义service中的方法Begin----------        bw = buildMethodComment(bw, "查询列表"); bw.newLine();        bw.newLine();        bw.write("\t" +"List<" + beanName + "> getlist(ProjectParameter param) throws SQLException;"); bw.newLine();        bw.newLine();                bw = buildMethodComment(bw, "查询（根据主键ID查询）"); bw.newLine();        bw.newLine();        bw.write("\t" + beanName + "  selectById (int id ) throws SQLException;"); bw.newLine();        bw.newLine();                bw = buildMethodComment(bw, "删除（根据主键ID删除）"); bw.newLine();        bw.newLine();        bw.write("\t" + "int delete(int id) throws SQLException;"); bw.newLine();        bw.newLine();                bw = buildMethodComment(bw, "添加"); bw.newLine();        bw.newLine();        bw.write("\t" + "int save(" + beanName + "  bean) throws SQLException;"); bw.newLine();        bw.newLine();                bw = buildMethodComment(bw, "submint"); bw.newLine();        bw.newLine();        bw.write("\t" + "int submit(" + beanName + "  bean) throws SQLException;"); bw.newLine();        bw.newLine();               bw = buildMethodComment(bw, "修改（根据主键ID修改）"); bw.newLine();        bw.newLine();        bw.write("\t" + "int edit(" + beanName + " bean) throws SQLException;"); bw.newLine();        bw.newLine();         // ----------定义service中的方法End----------        bw.newLine();        bw.write("}"); bw.newLine();        bw.flush();        bw.close();    }        /**     *  构建Impl文件     *     * @throws IOException      */    private void buildImpl() throws IOException {        File folder = new File(impl_path);        if ( !folder.exists() ) {            folder.mkdirs();        }         File implFile = new File(impl_path, implName + ".java");        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(implFile), "utf-8"));        bw.write("package " + impl_package + ";");        bw.newLine();        bw.newLine();        bw.write("import java.io.IOException;"); bw.newLine();  bw.write("import java.sql.SQLException;"); bw.newLine();  bw.write("import java.util.ArrayList;"); bw.newLine();  bw.write("import java.util.HashMap;"); bw.newLine();  bw.write("import java.util.List;"); bw.newLine();  bw.write("import java.util.Map;"); bw.newLine();    bw.write("import javax.annotation.Resource;"); bw.newLine();  bw.write("import javax.servlet.http.HttpServletRequest;"); bw.newLine();  bw.write("import javax.servlet.http.HttpServletResponse;"); bw.newLine();    bw.write("import org.apache.commons.lang.StringUtils;"); bw.newLine();  bw.write("import org.apache.log4j.Logger;"); bw.newLine();  bw.write("import org.springframework.stereotype.Controller;"); bw.newLine();  bw.write("import org.springframework.web.bind.annotation.RequestBody;"); bw.newLine();  bw.write("import org.springframework.web.bind.annotation.RequestMapping;"); bw.newLine();  bw.write("import org.springframework.web.bind.annotation.RequestMethod;"); bw.newLine();  bw.write("import org.springframework.web.bind.annotation.ResponseBody;"); bw.newLine();    bw.write("import com.alibaba.fastjson.JSON;"); bw.newLine();  bw.write("import com.fasterxml.jackson.databind.ObjectMapper;"); bw.newLine();  bw.write("import com.we.bean." + beanName + ";"); bw.newLine();  bw.write("import com.we.bean.ProjectParameter;"); bw.newLine();  bw.write("import com.we.brief.jsonbena.ProjectBriefJsonBean;"); bw.newLine();  bw.write("import "+service_package+ "." +serviceName+";"); bw.newLine();  bw.write("import com.we.enums.BriefStatusEnum;"); bw.newLine();        bw.newLine();        bw.write("import " + bean_package + "." + beanName + ";"); bw.newLine();        bw.newLine();               bw = buildClassComment(bw, implName + " Impl类"); bw.newLine();        bw.newLine();        bw.newLine();        bw.write("@Transactional(value = \"mysql\")"); bw.newLine();        bw.write("@Service(\"" + beanName + "Service\")"); bw.newLine();        bw.write("public class " + implName + " implements  " + serviceName + "{"); bw.newLine();        bw.newLine();        bw.newLine();        // ----------定义impl中的方法Begin----------        bw.write("\t" + "@Resource"); bw.newLine();  bw.write("\t" + "private " + mapperName + " mapper;"); bw.newLine();          bw = buildMethodComment(bw, "查询list"); bw.newLine();        bw.newLine();  bw.write("\t" + "@Override"); bw.newLine();  bw.write("\t" + "public List<" + beanName + "> getlist(ProjectParameter param)"); bw.newLine();  bw.write("\t" + "  throws SQLException {"); bw.newLine();  bw.write("\t" + " return this.mapper.listDetailInfo(param);"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();        bw.newLine();          bw = buildMethodComment(bw, "submit"); bw.newLine();        bw.newLine();        bw.write("\t" + "  @Transactional(propagation = Propagation.REQUIRES_NEW)"); bw.newLine();        bw.write("\t" + " @Override"); bw.newLine();        bw.write("\t" + " public int submit(" + beanName + " bean) throws SQLException {"); bw.newLine();  bw.write("\t" + "  bean.setModifyDate(new Date());"); bw.newLine();  bw.write("\t" + "  bean.setStatus(BriefStatusEnum.RECEIVED.getKey());"); bw.newLine();  bw.write("\t" + "  return this.mapper.updateByPrimaryKeySelective(bean);"); bw.newLine();  bw.write("\t" + " }"); bw.newLine();        bw.newLine();                bw = buildMethodComment(bw, "查询（根据主键ID查询）"); bw.newLine();        bw.newLine();        bw.write("\t" + "@Override"); bw.newLine();  bw.write("\t" + "public " + beanName + " selectById(int beanId) throws SQLException {"); bw.newLine();  bw.write("\t" + " return this.mapper.selectByPrimaryKey(beanId);"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();        bw.newLine();                bw = buildMethodComment(bw, "删除（根据主键ID删除）"); bw.newLine();        bw.newLine();  bw.write("\t" + " @Transactional(propagation = Propagation.REQUIRES_NEW)"); bw.newLine();  bw.write("\t" + "@Override"); bw.newLine();  bw.write("\t" + "public int delete(int beanId) throws SQLException {"); bw.newLine();  bw.write("\t" + " return this.mapper.deleteByPrimaryKey(beanId);"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();  bw.newLine();                bw = buildMethodComment(bw, "添加"); bw.newLine();        bw.newLine();  bw.write("\t" + "@Transactional(propagation = Propagation.REQUIRES_NEW)"); bw.newLine();  bw.newLine();  bw.write("\t" + "@Override"); bw.newLine();  bw.write("\t" + "public int save(" + beanName + " bean) throws SQLException {"); bw.newLine();  bw.write("\t" + "// bean.setCreateDate(new Date());"); bw.newLine();  bw.write("\t" + "// bean.setModifyDate(new Date());"); bw.newLine();  bw.write("\t" + " this.mapper.insertSelective(bean);"); bw.newLine();  bw.write("\t" + " return bean.getbeanId();"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();        bw.newLine();                        bw = buildMethodComment(bw, "修改 （匹配有值的字段）"); bw.newLine();        bw.newLine();  bw.write("\t" + "@Transactional(propagation = Propagation.REQUIRES_NEW)"); bw.newLine();  bw.write("\t" + "@Override"); bw.newLine();  bw.write("\t" + "public int edit(" + beanName + " bean) throws SQLException {"); bw.newLine();  bw.write("\t" + " return this.mapper.updateByPrimaryKeySelective(bean);"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();        bw.newLine();                 // ----------定义impl中的方法End----------        bw.newLine();        bw.write("}");        bw.flush();        bw.close();    }        /**     *  构建Controller文件     *     * @throws IOException      */    private void buildController() throws IOException {        File folder = new File(controller_path);        if ( !folder.exists() ) {            folder.mkdirs();        }         File controllerFile = new File(controller_path, controllerName + ".java");        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(controllerFile), "utf-8"));        bw.write("package " + controller_package + ";");        bw.newLine();        bw.newLine();        bw.write("import " + bean_package + "." + beanName + ";");        bw.newLine();        bw.write("import java.io.IOException;"); bw.newLine();  bw.write("import java.sql.SQLException;"); bw.newLine();  bw.write("import java.util.ArrayList;"); bw.newLine();  bw.write("import java.util.HashMap;"); bw.newLine();  bw.write("import java.util.List;"); bw.newLine();  bw.write("import java.util.Map;"); bw.newLine();    bw.write("import javax.annotation.Resource;"); bw.newLine();  bw.write("import javax.servlet.http.HttpServletRequest;"); bw.newLine();  bw.write("import javax.servlet.http.HttpServletResponse;"); bw.newLine();    bw.write("import org.apache.commons.lang.StringUtils;"); bw.newLine();  bw.write("import org.apache.log4j.Logger;"); bw.newLine();  bw.write("import org.springframework.stereotype.Controller;"); bw.newLine();  bw.write("import org.springframework.web.bind.annotation.RequestBody;"); bw.newLine();  bw.write("import org.springframework.web.bind.annotation.RequestMapping;"); bw.newLine();  bw.write("import org.springframework.web.bind.annotation.RequestMethod;"); bw.newLine();  bw.write("import org.springframework.web.bind.annotation.ResponseBody;"); bw.newLine();    bw.write("import com.alibaba.fastjson.JSON;"); bw.newLine();  bw.write("import com.fasterxml.jackson.databind.ObjectMapper;"); bw.newLine();  bw.write("import com.we.bean." + beanName + ";"); bw.newLine();  bw.write("import com.we.bean.ProjectParameter;"); bw.newLine();  bw.write("import com.we.brief.jsonbena.ProjectBriefJsonBean;"); bw.newLine();  bw.write("import "+service_package+ "." +serviceName+";"); bw.newLine();  bw.write("import com.we.enums.BriefStatusEnum;"); bw.newLine();  bw.write("import com.we.tool.BeanUtil;"); bw.newLine();  bw.write("import com.we.tool.Constant;"); bw.newLine();  bw.write("import com.we.tool.ResultDto;"); bw.newLine();  bw.newLine();  bw.newLine();        bw = buildClassComment(bw, controllerName + " Controller接口类"); bw.newLine();        bw.newLine();        bw.newLine();                bw.write("@Controller"); bw.newLine();        bw.write("@RequestMapping(value = \""+tableName+"\")"); bw.newLine();                bw.write("public class " + controllerName + "{"); bw.newLine();        bw.write("\t private static Logger logger = Logger.getLogger("+controllerName+".class);"); bw.newLine();        bw.newLine();        bw.newLine();                bw.write("\t @Resource"); bw.newLine();        bw.write("\t private "+serviceName+" "+beanName+"Service;"); bw.newLine();        // ----------定义controller中的方法Begin----------                bw = buildMethodComment(bw, "查询（根据主键ID查询）"); bw.newLine();        bw.newLine();        bw.write("\t" + "@SuppressWarnings(\"unchecked\")"); bw.newLine();        bw.write("\t" + "@RequestMapping(value = \"/search.json\", method = RequestMethod.GET)"); bw.newLine();        bw.write("\t" + "@ResponseBody"); bw.newLine();  bw.write("\t" + "public ResultDto getProjectList(int userid, int clientID, int status, String keyword,"); bw.newLine();  bw.write("\t" + " int pageIndex, int pageSize, HttpServletRequest request, HttpServletResponse reponse) {"); bw.newLine();    bw.write("\t" + "if(\"0\".equals(String.valueOf(userid))||String.valueOf(userid)==null){"); bw.newLine();  bw.write("\t" + " return new ResultDto(Constant.NACK, \"The user id is null \", null);"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();  bw.write("\t" + "if(\"0\".equals(String.valueOf(clientID))||String.valueOf(clientID)==null){"); bw.newLine();  bw.write("\t" + "return new ResultDto(Constant.NACK, \"The client id is null \", null);"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();  bw.write("\t" + "if(\"0\".equals(String.valueOf(pageIndex))||String.valueOf(pageIndex)==null){"); bw.newLine();  bw.write("\t" + "pageIndex=1;"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();  bw.write("\t" + "if(\"0\".equals(String.valueOf(pageSize))||String.valueOf(pageSize)==null){"); bw.newLine();  bw.write("\t" + " pageSize=10;"); bw.newLine();  bw.write("\t" + " }"); bw.newLine();  bw.write("\t" + " ProjectParameter param = new ProjectParameter();"); bw.newLine();  bw.write("\t" + " param.setClientID(clientID);"); bw.newLine();  bw.write("\t" + " param.setKeyword(keyword);"); bw.newLine();  bw.write("\t" + " param.setPageIndex(pageIndex);"); bw.newLine();  bw.write("\t" + " param.setPageSize(pageSize);"); bw.newLine();  bw.write("\t" + " param.setStatus(status);"); bw.newLine();  bw.write("\t" + " param.setUserid(userid);"); bw.newLine();    bw.write("\t" + "Map<String, Object> returnMap = new HashMap<String, Object>();"); bw.newLine();  bw.write("\t" + "try {"); bw.newLine();  bw.write("\t" + " List<List<?>> recordList = this." + beanName + "Service.listDetailInfo(param);"); bw.newLine();  bw.write("\t" + " if (recordList.size() > 0) {"); bw.newLine();  bw.write("\t" + "  Integer pageNumber = 0;"); bw.newLine();  bw.write("\t" + "  if (recordList.get(0).size() > 0) {"); bw.newLine();  bw.write("\t" + "   Integer pageTotal = Integer.valueOf(String.valueOf(recordList.get(0).get(0)));"); bw.newLine();  bw.write("\t" + "   pageNumber = pageTotal / pageSize + (pageTotal % pageSize == 0 ? 0 : 1);"); bw.newLine();  bw.write("\t" + "  }"); bw.newLine();  bw.write("\t" + "  List<Object> projectBriefList = null;"); bw.newLine();  bw.write("\t" + "  if (recordList.get(1).size() > 0) {"); bw.newLine();  bw.write("\t" + "   projectBriefList = (List<Object>) recordList.get(1);"); bw.newLine();  bw.write("\t" + "  }"); bw.newLine();  bw.write("\t" + "  returnMap.put(\"pageNumber\", pageNumber);"); bw.newLine();  bw.write("\t" + "  returnMap.put(\"projectBrief\", projectBriefList);"); bw.newLine();  bw.write("\t" + " }"); bw.newLine();  bw.write("\t" + "} catch (SQLException e) {"); bw.newLine();  bw.write("\t" + " reponse.setStatus(Constant.SERVER_ERROR);"); bw.newLine();  bw.write("\t" + " return new ResultDto(Constant.NACK, \"search list fail!\", null);"); bw.newLine();  bw.write("\t" + " }"); bw.newLine();  bw.write("\t" + ""); bw.newLine();  bw.write("\t" + " reponse.setStatus(Constant.HTTP_OK);"); bw.newLine();  bw.write("\t" + " return new ResultDto(Constant.ACK, Constant.SUCCEED, returnMap);"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();                bw.newLine();        bw = buildMethodComment(bw, "添加"); bw.newLine();        bw.newLine();        bw.write("\t" + "@RequestMapping(value = \"/add.json\", method = RequestMethod.POST)"); bw.newLine();  bw.write("\t" + "@ResponseBody"); bw.newLine();  bw.write("\t" + "public ResultDto add(HttpServletRequest request,"); bw.newLine();  bw.write("                            HttpServletResponse reponse, @RequestBody String message) {"); bw.newLine();  bw.write("\t" + " ObjectMapper mapper = new ObjectMapper();"); bw.newLine();  bw.write("\t" + " try {"); bw.newLine();  bw.write("\t" + "  " + beanName + " bean = mapper.readValue(message, " + beanName + ".class);"); bw.newLine();  bw.write("\t" + "  int beanid = " + beanName + "Service.save(bean);"); bw.newLine();  bw.write("\t" + "  reponse.setStatus(Constant.HTTP_OK);"); bw.newLine();  bw.write("\t" + "  return new ResultDto(Constant.ACK, Constant.SUCCEED, beanid);"); bw.newLine();  bw.write("\t" + " } catch (IOException e) {"); bw.newLine();  bw.write("\t" + "  reponse.setStatus(Constant.SERVER_ERROR);"); bw.newLine();  bw.write("\t" + "  logger.error(e.toString());"); bw.newLine();  bw.write("\t" + "  return new ResultDto(Constant.NACK, \"add parameter error \", null);"); bw.newLine();  bw.write("\t" + " }  catch (SQLException e) {"); bw.newLine();  bw.write("\t" + "  reponse.setStatus(Constant.SERVER_ERROR);"); bw.newLine();  bw.write("\t" + "   logger.error(e.toString());"); bw.newLine();  bw.write("\t" + "  return new ResultDto(Constant.NACK, \"add sql error \", null);"); bw.newLine();  bw.write("\t" + " }"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();  bw.newLine();                bw = buildMethodComment(bw, "删除（根据主键ID删除）"); bw.newLine();        bw.newLine();        bw.write("\t" + "@RequestMapping(value = \"/delete.json\", method = RequestMethod.DELETE)"); bw.newLine();  bw.write("\t" + "@ResponseBody"); bw.newLine();  bw.write("\t" + "public ResultDto deleteById(HttpServletRequest request,"); bw.newLine();  bw.write("                                    HttpServletResponse reponse, @RequestBody String message) {"); bw.newLine();  bw.write("\t" + " ObjectMapper mapper = new ObjectMapper();"); bw.newLine();  bw.write("\t" + " try {"); bw.newLine();  bw.write("\t" + "  " + beanName + " bean = mapper.readValue(message, " + beanName + ".class);"); bw.newLine();  bw.write("\t" + " if(\"\".equals(bean.getBriefId())||bean.getBriefId()==null){"); bw.newLine();  bw.write("\t" + " return new ResultDto(Constant.NACK, \"The bean id is null \", null);"); bw.newLine();  bw.write("\t" + " }"); bw.newLine();  bw.write("\t" + " " + beanName + "Service.deleteReceivedReports(bean.getBriefId());"); bw.newLine();  bw.write("\t" + " reponse.setStatus(Constant.HTTP_OK);"); bw.newLine();  bw.write("\t" + " return new ResultDto(Constant.ACK, Constant.SUCCEED, null);"); bw.newLine();  bw.write("\t" + " } catch (IOException e) {"); bw.newLine();  bw.write("\t" + "  reponse.setStatus(Constant.SERVER_ERROR);"); bw.newLine();  bw.write("\t" + "  logger.error(e.toString());"); bw.newLine();  bw.write("\t" + "  return new ResultDto(Constant.NACK, \"delete parameter error \", null);"); bw.newLine();  bw.write("\t" + " } catch (SQLException e) {"); bw.newLine();  bw.write("\t" + "  reponse.setStatus(Constant.SERVER_ERROR);"); bw.newLine();  bw.write("\t" + "  logger.error(e.toString());"); bw.newLine();  bw.write("\t" + "  return new ResultDto(Constant.NACK, \"delete sql error\", null);"); bw.newLine();  bw.write("\t" + " }"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();  bw.newLine();               bw = buildMethodComment(bw, "修改（根据主键ID修改）"); bw.newLine();        bw.newLine();        bw.write("\t" + "@RequestMapping(value = \"/edit.json\", method = RequestMethod.PUT)"); bw.newLine();  bw.write("\t" + "@ResponseBody"); bw.newLine();  bw.write("\t" + "public ResultDto edit( HttpServletRequest request,"); bw.newLine();  bw.write("        HttpServletResponse reponse, @RequestBody String message) {"); bw.newLine();  bw.write("\t" + " ObjectMapper mapper = new ObjectMapper();"); bw.newLine();  bw.write("\t" + " try {"); bw.newLine();  bw.write("\t" + "  " + beanName + " bean = mapper.readValue(message, " + beanName + ".class);"); bw.newLine();  bw.write("\t" + " if(\"\".equals(bean.getBriefId())||bean.getBriefId()==null){"); bw.newLine();  bw.write("\t" + "  return new ResultDto(Constant.NACK, \"The bean id is null \", null);"); bw.newLine();  bw.write("\t" + " }"); bw.newLine();  bw.write("\t" + " int sub=this."+beanName+"Service.edit(bean);"); bw.newLine();  bw.write("\t" + " reponse.setStatus(Constant.HTTP_OK);"); bw.newLine();  bw.write("\t" + "return new ResultDto(Constant.ACK, Constant.SUCCEED, sub);"); bw.newLine();  bw.write("\t" + "} catch (IOException e) {"); bw.newLine();  bw.write("\t" + "reponse.setStatus(Constant.SERVER_ERROR);"); bw.newLine();  bw.write("\t" + " logger.error(e.toString());"); bw.newLine();  bw.write("\t" + " return new ResultDto(Constant.NACK, \"edit parameter error \", null);"); bw.newLine();  bw.write("\t" + "} catch (SQLException e) {"); bw.newLine();  bw.write("\t" + " reponse.setStatus(Constant.SERVER_ERROR);"); bw.newLine();  bw.write("\t" + " logger.error(e.toString());"); bw.newLine();  bw.write("\t" + " return new ResultDto(Constant.NACK, \"edit sql error \", null);"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();  bw.write("\t" + "}"); bw.newLine();  bw.newLine();         // ----------定义controller中的方法End----------        bw.newLine();        bw.write("}");        bw.flush();        bw.close();    }      public void generate(String tableName) throws ClassNotFoundException, SQLException, IOException {        init();        String prefix = "show full fields from ";        List<String> columns = null;        List<String> types = null;        List<String> comments = null;        PreparedStatement pstate = null;        List<String> tables = getTables();        Map<String, String> tableComments = getTableComment();        if(null==tableName){         for ( String table : tables ) {             columns = new ArrayList<String>();             types = new ArrayList<String>();             comments = new ArrayList<String>();             pstate = conn.prepareStatement(prefix + table);             ResultSet results = pstate.executeQuery();             while ( results.next() ) {                 columns.add(results.getString("FIELD"));                 types.add(results.getString("TYPE"));                 comments.add(results.getString("COMMENT"));             }             tableName = table;             processTable(table);             //          this.outputBaseBean();             String tableComment = tableComments.get(tableName);             buildEntityBean(columns, types, comments, tableComment);             buildMapper();             buildMapperXml(columns, types, comments);             buildService();             buildImpl();             buildController();         }        }else{             columns = new ArrayList<String>();             types = new ArrayList<String>();             comments = new ArrayList<String>();             pstate = conn.prepareStatement(prefix + tableName);             ResultSet results = pstate.executeQuery();             while ( results.next() ) {                 columns.add(results.getString("FIELD"));                 types.add(results.getString("TYPE"));                 comments.add(results.getString("COMMENT"));             }             processTable(tableName);             //          this.outputBaseBean();             String tableComment = tableComments.get(tableName);             buildEntityBean(columns, types, comments, tableComment);             buildMapper();             buildMapperXml(columns, types, comments);             buildService();             buildImpl();             buildController();        }        conn.close();    }      public static void main( String[] args ) {               try {         tableName = "project_brief";            new EntityUtil().generate(tableName);            // 自动打开生成文件的目录            Runtime.getRuntime().exec("cmd /c start explorer D:\\");        } catch ( ClassNotFoundException e ) {            e.printStackTrace();        } catch ( SQLException e ) {            e.printStackTrace();        } catch ( IOException e ) {            e.printStackTrace();        }    }}
